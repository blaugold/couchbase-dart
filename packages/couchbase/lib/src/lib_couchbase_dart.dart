// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for libCouchbaseDart
class LibCouchbaseDart {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibCouchbaseDart(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibCouchbaseDart.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<CBDConnection> CBDConnection_Create() {
    return _CBDConnection_Create();
  }

  late final _CBDConnection_CreatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CBDConnection> Function()>>(
          'CBDConnection_Create');
  late final _CBDConnection_Create = _CBDConnection_CreatePtr.asFunction<
      ffi.Pointer<CBDConnection> Function()>();

  void CBDConnection_Destroy(
    ffi.Pointer<CBDConnection> connection,
  ) {
    return _CBDConnection_Destroy(
      connection,
    );
  }

  late final _CBDConnection_DestroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CBDConnection>)>>(
      'CBDConnection_Destroy');
  late final _CBDConnection_Destroy = _CBDConnection_DestroyPtr.asFunction<
      void Function(ffi.Pointer<CBDConnection>)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final LibCouchbaseDart _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<CBDConnection> Function()>>
      get CBDConnection_Create => _library._CBDConnection_CreatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CBDConnection>)>>
      get CBDConnection_Destroy => _library._CBDConnection_DestroyPtr;
}

class CBDConnection_ extends ffi.Opaque {}

typedef CBDConnection = CBDConnection_;
