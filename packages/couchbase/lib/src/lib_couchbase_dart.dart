// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for libCouchbaseDart
class LibCouchbaseDart {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibCouchbaseDart(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibCouchbaseDart.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void CBDErrorCode_Destroy(
    CBDErrorCode errorCode,
  ) {
    return _CBDErrorCode_Destroy(
      errorCode,
    );
  }

  late final _CBDErrorCode_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CBDErrorCode)>>(
          'CBDErrorCode_Destroy');
  late final _CBDErrorCode_Destroy =
      _CBDErrorCode_DestroyPtr.asFunction<void Function(CBDErrorCode)>();

  int CBDErrorCode_Code(
    CBDErrorCode errorCode,
  ) {
    return _CBDErrorCode_Code(
      errorCode,
    );
  }

  late final _CBDErrorCode_CodePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(CBDErrorCode)>>(
          'CBDErrorCode_Code');
  late final _CBDErrorCode_Code =
      _CBDErrorCode_CodePtr.asFunction<int Function(CBDErrorCode)>();

  void CBDErrorCode_Message(
    CBDErrorCode errorCode,
    CBD_ReadStringCallback callback,
  ) {
    return _CBDErrorCode_Message(
      errorCode,
      callback,
    );
  }

  late final _CBDErrorCode_MessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CBDErrorCode, CBD_ReadStringCallback)>>('CBDErrorCode_Message');
  late final _CBDErrorCode_Message = _CBDErrorCode_MessagePtr.asFunction<
      void Function(CBDErrorCode, CBD_ReadStringCallback)>();

  CBDClusterCredentials CBDClusterCredentials_Create() {
    return _CBDClusterCredentials_Create();
  }

  late final _CBDClusterCredentials_CreatePtr =
      _lookup<ffi.NativeFunction<CBDClusterCredentials Function()>>(
          'CBDClusterCredentials_Create');
  late final _CBDClusterCredentials_Create = _CBDClusterCredentials_CreatePtr
      .asFunction<CBDClusterCredentials Function()>();

  void CBDClusterCredentials_Destroy(
    CBDClusterCredentials credentials,
  ) {
    return _CBDClusterCredentials_Destroy(
      credentials,
    );
  }

  late final _CBDClusterCredentials_DestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CBDClusterCredentials)>>(
          'CBDClusterCredentials_Destroy');
  late final _CBDClusterCredentials_Destroy = _CBDClusterCredentials_DestroyPtr
      .asFunction<void Function(CBDClusterCredentials)>();

  void CBDClusterCredentials_SetUsername(
    CBDClusterCredentials credentials,
    ffi.Pointer<ffi.Char> buf,
    int size,
  ) {
    return _CBDClusterCredentials_SetUsername(
      credentials,
      buf,
      size,
    );
  }

  late final _CBDClusterCredentials_SetUsernamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CBDClusterCredentials, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('CBDClusterCredentials_SetUsername');
  late final _CBDClusterCredentials_SetUsername =
      _CBDClusterCredentials_SetUsernamePtr.asFunction<
          void Function(CBDClusterCredentials, ffi.Pointer<ffi.Char>, int)>();

  void CBDClusterCredentials_SetPassword(
    CBDClusterCredentials credentials,
    ffi.Pointer<ffi.Char> buf,
    int size,
  ) {
    return _CBDClusterCredentials_SetPassword(
      credentials,
      buf,
      size,
    );
  }

  late final _CBDClusterCredentials_SetPasswordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CBDClusterCredentials, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('CBDClusterCredentials_SetPassword');
  late final _CBDClusterCredentials_SetPassword =
      _CBDClusterCredentials_SetPasswordPtr.asFunction<
          void Function(CBDClusterCredentials, ffi.Pointer<ffi.Char>, int)>();

  bool CBD_Init(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _CBD_Init(
      data,
    );
  }

  late final _CBD_InitPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'CBD_Init');
  late final _CBD_Init =
      _CBD_InitPtr.asFunction<bool Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<CBDConnection> CBDConnection_Create(
    int port,
  ) {
    return _CBDConnection_Create(
      port,
    );
  }

  late final _CBDConnection_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CBDConnection> Function(
              Dart_Port_DL)>>('CBDConnection_Create');
  late final _CBDConnection_Create = _CBDConnection_CreatePtr.asFunction<
      ffi.Pointer<CBDConnection> Function(int)>();

  void CBDConnection_Destroy(
    ffi.Pointer<CBDConnection> connection,
  ) {
    return _CBDConnection_Destroy(
      connection,
    );
  }

  late final _CBDConnection_DestroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CBDConnection>)>>(
      'CBDConnection_Destroy');
  late final _CBDConnection_Destroy = _CBDConnection_DestroyPtr.asFunction<
      void Function(ffi.Pointer<CBDConnection>)>();

  void CBDConnection_Open(
    ffi.Pointer<CBDConnection> connection,
    ffi.Pointer<ffi.Char> connectionStringBuf,
    int connectionStringSize,
    CBDClusterCredentials credentials,
    int callback,
  ) {
    return _CBDConnection_Open(
      connection,
      connectionStringBuf,
      connectionStringSize,
      credentials,
      callback,
    );
  }

  late final _CBDConnection_OpenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CBDConnection>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              CBDClusterCredentials,
              CBD_Callback)>>('CBDConnection_Open');
  late final _CBDConnection_Open = _CBDConnection_OpenPtr.asFunction<
      void Function(ffi.Pointer<CBDConnection>, ffi.Pointer<ffi.Char>, int,
          CBDClusterCredentials, int)>();

  void CBDConnection_Close(
    ffi.Pointer<CBDConnection> connection,
    int callback,
  ) {
    return _CBDConnection_Close(
      connection,
      callback,
    );
  }

  late final _CBDConnection_ClosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CBDConnection>,
              CBD_Callback)>>('CBDConnection_Close');
  late final _CBDConnection_Close = _CBDConnection_ClosePtr.asFunction<
      void Function(ffi.Pointer<CBDConnection>, int)>();

  void CBDConnection_OpenBucket(
    ffi.Pointer<CBDConnection> connection,
    ffi.Pointer<ffi.Char> bucketNameBuf,
    int bucketNameSize,
    int callback,
  ) {
    return _CBDConnection_OpenBucket(
      connection,
      bucketNameBuf,
      bucketNameSize,
      callback,
    );
  }

  late final _CBDConnection_OpenBucketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CBDConnection>, ffi.Pointer<ffi.Char>,
              ffi.Size, CBD_Callback)>>('CBDConnection_OpenBucket');
  late final _CBDConnection_OpenBucket =
      _CBDConnection_OpenBucketPtr.asFunction<
          void Function(
              ffi.Pointer<CBDConnection>, ffi.Pointer<ffi.Char>, int, int)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final LibCouchbaseDart _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CBDErrorCode)>>
      get CBDErrorCode_Destroy => _library._CBDErrorCode_DestroyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(CBDErrorCode)>>
      get CBDErrorCode_Code => _library._CBDErrorCode_CodePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(CBDErrorCode, CBD_ReadStringCallback)>>
      get CBDErrorCode_Message => _library._CBDErrorCode_MessagePtr;
  ffi.Pointer<ffi.NativeFunction<CBDClusterCredentials Function()>>
      get CBDClusterCredentials_Create =>
          _library._CBDClusterCredentials_CreatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CBDClusterCredentials)>>
      get CBDClusterCredentials_Destroy =>
          _library._CBDClusterCredentials_DestroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  CBDClusterCredentials, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get CBDClusterCredentials_SetUsername =>
          _library._CBDClusterCredentials_SetUsernamePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  CBDClusterCredentials, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get CBDClusterCredentials_SetPassword =>
          _library._CBDClusterCredentials_SetPasswordPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>
      get CBD_Init => _library._CBD_InitPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Pointer<CBDConnection> Function(Dart_Port_DL)>>
      get CBDConnection_Create => _library._CBDConnection_CreatePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CBDConnection>)>>
      get CBDConnection_Destroy => _library._CBDConnection_DestroyPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CBDConnection>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              CBDClusterCredentials,
              CBD_Callback)>> get CBDConnection_Open =>
      _library._CBDConnection_OpenPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<CBDConnection>, CBD_Callback)>>
      get CBDConnection_Close => _library._CBDConnection_ClosePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CBDConnection>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              CBD_Callback)>> get CBDConnection_OpenBucket =>
      _library._CBDConnection_OpenBucketPtr;
}

class CBDErrorCode_ extends ffi.Opaque {}

typedef CBDErrorCode = ffi.Pointer<CBDErrorCode_>;
typedef CBD_ReadStringCallback = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Size)>>;

class CBDClusterCredentials_ extends ffi.Opaque {}

typedef CBDClusterCredentials = ffi.Pointer<CBDClusterCredentials_>;

class CBDConnection_ extends ffi.Opaque {}

typedef CBDConnection = CBDConnection_;
typedef Dart_Port_DL = ffi.Int64;
typedef CBD_Callback = ffi.Int64;
